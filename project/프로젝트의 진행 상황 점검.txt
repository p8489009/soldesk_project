프로젝트의 진행 상황 점검

프로젝트 진행의 방향성



알람은 클라우드 워치의 sns 람다 슬래그를 통해  구성
람다의 특정 로그를 통해 에러를 감지하여 구성
람다 로그를 통해 sns 관리
문자 - sns - push notification 
전화 - 페이져 듀티와 그라파나 전화 알람
알람 - ec2를 종료했을 때 알람이 발송 되도록 ( 장애 상황 )
클라우드 워치 메모리 모니터링
ec2 클라우드 에이전트를 설치해서 메모리 디텍팅을 디테일하게 관리 가능 ( sns )
워프 서비스 - api 게이트웨이 앞에 설정 가능,  WAF 서비스 요청이 들어올 때  요청이 많을 때 제한
ALB 엑세스 로그를 활성화 했을 때 모바일이나 웹에서 어디서 많이 들어오는 것을 확인 ( 워프와 연동 가능 )
프로메테우스를 통해 알람
알람이 우선순위 , 로그 기반 알람과 ec2 종료 알람
시연 영상 - 알람
ansible은 대규모의 서버를 관리할 때 사용, k8s로 대체 가능 
awx로 보통 사용




앤서블 방향
앤서블은 패키지 업데이트 , 대규모 분산 시스템
앤서블 보안 접근 포트를 22 -> 123
앤서블로 취약점 점검을 플레이북으로 패키지 명령어의 버전을 업데이트 하여 확인할 수 있다.
ansible를 nginx, 기본 문서를 세팅해주는 것
EFS 시스템을 이용하여 ansible로 파일 설정 ( 여러대의 컴퓨터가 있을 때, 한대에 적용 시 볼륨으로 전체 공유  )



spot 인스턴스 사용, 스케줄링을 통해 새벽 시간 끄기
오토 스케일링 - 시간을 지정해서 트래픽이 증가하는 시간에 증가의 시나리오 



dynamo db 내용은 저장
dynamo 데이터 설문조사 데이터 ( 파싱해서 가져오기 )
데이터를 저장할 때의 이벤트를 트리거를 s3에 저장하는 것 가능, 알람도 가능
 


아키텍처
백 엔드를 통해 lambda 함수로 구성 및 s3 호스팅과 클라우드 프론트 구성과
private ec2를 통해 db 접근 s3 호스팅  
s3 클라우드 호스팅 cloud 호스팅 캐싱 ( 선택 사항 )
static page: -> ec2 오토 스케일링, bastion으로 private ec2에 전송, cloud front s3 호스팅 




테라폼 스테이트 공유
https://github.com/Fastcampus-Kubernetes-Devops/Part_3/tree/main/3-1_Terraform 참고
테라폼 스테이트를 공유, s3 bucket key
dynamodb lock을 통해 db 접근 제한 가능 
 


퀵 사이트는 우선 순위를 낮춰도 된다










프로젝트 진행 상황 점검 및 방향성


1. 알람 구성

클라우드 워치 & SNS: 알람을 클라우드 워치의 SNS, 람다, 슬랙을 통해 구성.
에러 감지: 람다의 특정 로그를 통해 에러 감지 및 알람 구성.
SNS 관리: 람다 로그를 통해 SNS 관리.

알람 종류:
문자: SNS를 통한 푸시 알림.
전화: 페이저 듀티 및 그라파나를 통한 전화 알람.
장애 상황 알람: EC2 종료 시 알람 발송.
메모리 모니터링: 클라우드 워치 에이전트를 통해 메모리 디테일 관리 및 SNS 알람.

WAF 서비스: API 게이트웨이 앞에 설정 가능, 요청 제한.
ALB 액세스 로그: 모바일/웹에서 접근 확인 가능, WAF와 연동 가능.

프로메테우스: 알람 관리.
알람 우선순위: 로그 기반 알람과 EC2 종료 알람.
시연 영상: 알람 시연 준비.


2. Ansible 구성 방향

Ansible 사용: 패키지 업데이트, 대규모 분산 시스템 관리.
보안 접근 포트: 포트를 22에서 123으로 변경.
취약점 점검: 플레이북을 통해 패키지 버전 업데이트 및 점검.
Nginx 설정: Ansible을 통해 기본 문서 세팅.
EFS 시스템: Ansible로 파일 설정 관리 (여러 컴퓨터에서 볼륨 공유).



3. 인프라 관리

Spot 인스턴스 사용: 스케줄링을 통해 새벽 시간에 인스턴스 종료.
오토 스케일링: 트래픽 증가 시간에 맞춰 스케일링 시나리오 적용.


4. DynamoDB 사용

데이터 저장: 설문조사 데이터 파싱 및 저장.
S3 이벤트 트리거: 데이터 저장 시 이벤트 트리거를 통해 알람 구성.


5. 아키텍처 구성

백엔드: Lambda 함수와 S3 호스팅, 클라우드 프론트 구성.
DB 접근: Private EC2를 통한 접근.
캐싱: S3 클라우드 호스팅과 클라우드 프론트를 통한 캐싱.
Static Page: EC2 오토 스케일링, Bastion을 통한 Private EC2 전송, 클라우드 프론트 S3 호스팅.


6. Terraform State 공유

S3 버킷 및 DynamoDB: Terraform state 공유를 위한 S3 버킷과 DynamoDB 잠금 설정.
참고 자료: Terraform State 공유 설정 참고 링크: https://github.com/Fastcampus-Kubernetes-Devops/Part_3/tree/main/3-1_Terraform .



7. 기타

Quicksight: 우선순위를 낮추기로 결정


